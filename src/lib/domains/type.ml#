open! Core

module Make (T : sig
  type t [@@deriving sexp_of, ord]
end) =
struct
  type t =
    | Single of T.t
    | Pair of t * t
    | Left of t
    | Right of t
    | Or of t * t
    | Opt_some of t
    | Opt_none
    | Opt of t
    | Top
    | Bottom
  [@@deriving sexp_of, ord]

  let is_top f = function Top -> true | Single t -> f t | _ -> false
  let bottom = Bottom

  let type_abs f =
    let rec aux t =
      match fst t with
      | Edo_adt.Typ.Pair (t_1, t_2) -> Pair (aux t_1, aux t_2)
      | Or (t_1, t_2) -> Or (aux t_1, aux t_2)
      | Option t -> Opt (aux t)
      | Unit | Never | Bool | Int | Nat | String | Chain_id | Bytes | Mutez
      | Key_hash | Key | Signature | Timestamp | Address | Operation
      | Bls12_381_g1 | Bls12_381_g2 | Bls12_381_fr | Chest | Chest_key | List _
      | Set _ | Contract _ | Ticket _
      | Lambda (_, _)
      | Map (_, _)
      | Big_map (_, _)
      | Sapling_transaction _ | Sapling_state _ ->
          Single (f t)
    in
    aux

  let param_storage_abs f param storage =
    Pair (type_abs f param, type_abs f storage)

  let join f =
    let rec join x y =
      match (x, y) with
      | Single x, Single y -> Single (f x y)
      | Pair (x_a, x_b), Pair (y_a, y_b) -> Pair (join x_a y_a, join x_b y_b)
      | Left x, Left y -> Left (join x y)
      | Right x, Right y -> Right (join x y)
      | Left l, Right r | Right r, Left l -> Or (l, r)
      | Or (x_l, x_r), Or (y_l, y_r) -> Or (join x_l y_l, join x_r y_r)
      | Left l, Or (x_l, x_r) | Or (x_l, x_r), Left l -> Or (join l x_l, x_r)
      | Right r, Or (x_l, x_r) | Or (x_l, x_r), Right r -> Or (x_l, join r x_r)
      | Opt_some x, Opt_some y -> Opt_some (join x y)
      | Opt_none, Opt_none -> Opt_none
      | Opt_some x, Opt_none | Opt_none, Opt_some x -> Opt x
      | Opt x, Opt y -> Opt (join x y)
      | Opt_some x, Opt y | Opt x, Opt_some y -> Opt (join x y)
      | Top, _ | _, Top -> Top
      | Bottom, x | x, Bottom -> x
      | _ -> failwiths ~here:[%here] "invalid types" (x, y) [%sexp_of: t * t]
    in
    join

  let meet f =
    let rec meet x y =
      match (x, y) with
      | Single x, Single y -> Single (f x y)
      | Pair (x_a, x_b), Pair (y_a, y_b) -> Pair (meet x_a y_a, meet x_b y_b)
      | Left x, Left y -> Left (meet x y)
      | Right x, Right y -> Right (meet x y)
      | Left _, Right _ | Right _, Left _ -> Bottom
      | Or (x_l, x_r), Or (y_l, y_r) -> Or (meet x_l y_l, meet x_r y_r)
      | Left l, Or (x_l, _) | Or (x_l, _), Left l -> Left (meet l x_l)
      | Right r, Or (_, x_r) | Or (_, x_r), Right r -> Right (meet r x_r)
      | Opt_some x, Opt_some y -> Opt_some (meet x y)
      | Opt_none, Opt_none -> Opt_none
      | Opt_some _, Opt_none | Opt_none, Opt_some _ -> Bottom
      | Opt x, Opt y -> Opt (meet x y)
      | Opt_some x, Opt y | Opt x, Opt_some y -> Opt_some (meet x y)
      | Top, x | x, Top -> x
      | Bottom, _ | _, Bottom -> Bottom
      | _ ->
          Debug.amf [%here] "invalid types";
          assert false
    in
    meet

  let widen f =
    let rec widen x y =
      match (x, y) with
      | Single x, Single y -> Single (f x y)
      | Pair (x_a, x_b), Pair (y_a, y_b) -> Pair (widen x_a y_a, widen x_b y_b)
      | Left x, Left y -> Left (widen x y)
      | Right x, Right y -> Right (widen x y)
      | Left l, Right r | Right r, Left l -> Or (l, r)
      | Or (x_l, x_r), Or (y_l, y_r) -> Or (widen x_l y_l, widen x_r y_r)
      | Left l, Or (x_l, x_r) -> Or (widen l x_l, x_r)
      | Or (x_l, _), Left l -> Left (widen x_l l)
      | Right r, Or (x_l, x_r) -> Or (x_l, widen r x_r)
      | Or (_, x_r), Right r -> Right (widen r x_r)
      | Opt_some x, Opt_some y -> Opt_some (widen x y)
      | Opt_none, Opt_none -> Opt_none
      | Opt_some _, Opt_none -> Opt_none
      | Opt_none, Opt_some x -> Opt_some x
      | Opt x, Opt y -> Opt (widen x y)
      | Opt_none, Opt x -> Opt x
      | Opt _, Opt_none -> Opt_none
      | Opt_some x, Opt y -> Opt (widen x y)
      | Opt x, Opt_some y -> Opt_some (widen x y)
      | Top, x -> x
      | _, Top -> Top
      | Bottom, x -> x
      | _, Bottom -> Bottom
      | _ ->
          Debug.amf [%here] "invalid types";
          assert false
    in
    widen

  let leq f =
    let rec leq x y =
      match (x, y) with
      | Single x, Single y -> f x y
      | Left x, Left y
      | Right x, Right y
      | Opt_some x, Opt_some y
      | Opt x, Opt y ->
          leq x y
      | Pair (x_a, x_b), Pair (y_a, y_b) | Or (x_a, x_b), Or (y_a, y_b) ->
          leq x_a y_a && leq x_b y_b
      | (Left _ | Right _), Or _ -> true
      | Or _, (Left _ | Right _) -> false
      | (Opt_some _ | Opt_none), Opt _ -> true
      | Opt _, (Opt_some _ | Opt_none) -> false
      | Opt_some _, Opt_none | Opt_none, Opt_some _ -> false
      | Opt_none, Opt_none -> true
      | Top, _ -> false
      | _, Top -> true
      | Bottom, _ -> true
      | _, Bottom -> false
      | Left _, Right _ | Right _, Left _ -> false
      | _ ->
          Debug.amf [%here] "invalid types";
          assert false
    in
    leq

  let is_bottom = function Bottom -> true | _ -> false

  let expr expr_d bottom_d abs_var e =
    let abs_var_or_not_found here v =
      match abs_var v with
      | Some x -> x
      | None -> failwiths ~here "var not found" v Tezla.Adt.Var.sexp_of_t
    in
    let unexpected_value here e v d =
      failwiths ~here "unexpected value" (e, v, d)
        [%sexp_of: Tezla.Adt.Expr.t * Tezla.Adt.Var.t * t]
    in
    let open Tezla.Adt in
    match e.Node.value with
    | E_var v | E_dup v -> abs_var_or_not_found [%here] v
    | E_car v -> (
        match abs_var_or_not_found [%here] v with
        | Pair (x, _) -> x
        | Bottom -> Bottom
        | d -> unexpected_value [%here] e v d)
    | E_cdr v -> (
        match abs_var_or_not_found [%here] v with
        | Pair (_, x) -> x
        | Bottom -> Bottom
        | d -> unexpected_value [%here] e v d)
    | E_pair (v_1, v_2) ->
        Pair (abs_var_or_not_found [%here] v_1, abs_var_or_not_found [%here] v_2)
    | E_left (v, _) -> Left (abs_var_or_not_found [%here] v)
    | E_right (v, _) -> Right (abs_var_or_not_found [%here] v)
    | E_unlift_or_left v -> (
        match abs_var_or_not_found [%here] v with
        | Left x | Or (x, _) -> x
        | d -> unexpected_value [%here] e v d)
    | E_unlift_or_right v -> (
        match abs_var_or_not_found [%here] v with
        | Right x | Or (_, x) -> x
        | d -> unexpected_value [%here] e v d)
    | E_some v -> Opt_some (abs_var_or_not_found [%here] v)
    | E_none _ -> Opt_none
    | E_unlift_option v -> (
        match abs_var_or_not_found [%here] v with
        | Opt_some x | Opt x -> x
        | d -> unexpected_value [%here] e v d)
    | E_contract_of_address (_, _) -> Opt Bottom
    | E_unpack (_, _) -> Opt Bottom
    | E_isnat _ -> Opt Bottom
    | E_div (_, _) -> Opt Bottom
    | E_slice (_, _, _) -> Opt Bottom
    | E_get (_, _) -> Opt Bottom
    | E_unit | E_self | E_now | E_amount | E_balance | E_source | E_sender
    | E_chain_id | E_push _ | E_abs _ | E_neg _ | E_not _
    | E_add (_, _)
    | E_sub (_, _)
    | E_mul (_, _)
    | E_shiftL (_, _)
    | E_shiftR (_, _)
    | E_and (_, _)
    | E_or (_, _)
    | E_xor (_, _)
    | E_eq _ | E_neq _ | E_lt _ | E_gt _ | E_leq _ | E_geq _
    | E_compare (_, _)
    | E_cons (_, _)
    | E_operation _
    | E_mem (_, _)
    | E_update (_, _, _)
    | E_concat (_, _)
    | E_concat_list _ | E_pack _ | E_implicit_account _
    | E_check_signature (_, _, _)
    | E_blake2b _ | E_sha256 _ | E_sha512 _ | E_hash_key _
    | E_address_of_contract _
    | E_create_contract_address (_, _, _, _)
    | E_hd _ | E_tl _ | E_size _ | E_int_of_nat _
    | E_lambda (_, _, _)
    | E_exec (_, _)
    | E_nil _ | E_empty_set _
    | E_empty_map (_, _)
    | E_empty_big_map (_, _)
    | E_apply (_, _)
    | E_append (_, _)
    | E_special_empty_list _
    | E_special_empty_map (_, _) ->
        Single
          (expr_d
             (fun v ->
               match abs_var v with
               | None -> None
               | Some (Single x) -> Some x
               | _ -> Some bottom_d)
             e)
    | E_total_voting_power | E_self_address | E_level | E_pair_n _
    | E_create_account_operation (_, _, _, _)
    | E_create_account_address (_, _, _, _)
    | E_voting_power _ | E_keccak _ | E_sha3 _ | E_pairing_check _
    | E_sapling_verify_update (_, _)
    | E_sapling_empty_state _
    | E_ticket (_, _)
    | E_read_ticket_pair _ | E_read_ticket_ticket _
    | E_split_ticket (_, _)
    | E_join_ticket _
    | E_open_chest (_, _, _)
    | E_get_and_update_val (_, _, _)
    | E_get_and_update_map (_, _, _)
    | E_dup_n (_, _)
    | E_get_n (_, _)
    | E_update_n (_, _, _) ->
        assert false (* TODO: *)

  let to_string f =
    let rec to_string = function
      | Single x -> f x
      | Opt_none -> "Opt_none"
      | Top -> "top"
      | Bottom -> "bottom"
      | Pair (x_1, x_2) -> [%string "(%{to_string x_1}, %{to_string x_2})"]
      | Left x -> [%string "Left %{to_string x}"]
      | Right x -> [%string "Right %{to_string x}"]
      | Or (x_1, x_2) -> [%string "Or (%{to_string x_1}, %{to_string x_2}"]
      | Opt_some x -> [%string "Opt_some %{to_string x}"]
      | Opt x -> [%string "Opt %{to_string x}"]
    in
    to_string
end
